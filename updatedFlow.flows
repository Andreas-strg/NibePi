[
    {
        "id": "c89009b.281dbf8",
        "type": "debug",
        "z": "8761bc05.2ab3d",
        "name": "Modbus",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 1187,
        "y": 441,
        "wires": []
    },
    {
        "id": "2ff40ef2.97be62",
        "type": "mqtt out",
        "z": "8761bc05.2ab3d",
        "name": "",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "broker": "ad4cdfd3.59d48",
        "x": 672,
        "y": 188,
        "wires": []
    },
    {
        "id": "e967773a.3216f8",
        "type": "function",
        "z": "8761bc05.2ab3d",
        "name": "MQTT -> Modbus",
        "func": "var register = flow.get(\"nibe_registers\")||getRegisters();\nvar updateRegisters = flow.get(\"nibe_update_registers\")||getRegisters();\nif(register===undefined || updateRegisters===undefined || msg.topic===undefined) { return; }\nvar topic = msg.topic.split(\"/\");\nvar address = Number(topic[2]);\nvar value = msg.payload;\n\ncheckDataType();\n\nfunction checkDataType() {\nvar item = register.find(item => item.register == address);\nif(item!==undefined) {\nvar data = [];\nif(topic[3]==\"set\") {\n    if(item.mode==\"R/W\") {\n        var min = Number(item.min);\n        var max = Number(item.max);\n        var corruptData;\n        value = value*item.factor;\n        if(min!==undefined && max!==undefined) {\n            if(min!==0 || max!==0) {\n                if((value>max) || (value<min)) {\n                    corruptData = true;\n                    node.warn('Data ('+value+') out of range, to register '+address);\n                }\n            }\n        }\n        data[0] = 192;\n        data[1] = 107;\n        data[2] = 6;\n        data[3] = (address & 0xFF);\n        data[4] = ((address >> 8) & 0xFF);\n        data[5] = (value & 0xFF);\n        data[6] = ((value >> 8) & 0xFF);\n        data[7] = ((value >> 16) & 0xFF);\n        data[8] = ((value >> 24) & 0xFF);\n        data[9] = Calc_CRC(data);\n        if(corruptData===undefined) {\n            node.send({payload:Buffer(data),port:10001});\n        }\n    }\n} else if(topic[3]==\"get\") {\n    data[0] = 192;\n    data[1] = 105;\n    data[2] = 2;\n    data[3] = (address & 0xFF);\n    data[4] = ((address >> 8) & 0xFF);\n    data[5] = Calc_CRC(data);\n    node.send({payload:Buffer(data),port:10000});\n}\n}\n}\n\nfunction Calc_CRC(data) {\nvar calc_checksum = 0;\nfor(var i = 0; i < (data[2] + 5); i++)\n\tcalc_checksum ^= data[i];\n    return calc_checksum;\n}\n\nfunction getRegisters() {\n    node.warn(\"Requesting registers\");\n    node.send([null,msg]);\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 747,
        "y": 440,
        "wires": [
            [
                "25879a4a.df9b06",
                "c89009b.281dbf8"
            ],
            [
                "8e756fa9.0dddc"
            ]
        ]
    },
    {
        "id": "e9e27c5e.f8eb4",
        "type": "inject",
        "z": "8761bc05.2ab3d",
        "name": "",
        "topic": "nibe/modbus/43005/set",
        "payload": "100",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 427,
        "y": 398,
        "wires": [
            [
                "89ca1e99.b4f4d"
            ]
        ]
    },
    {
        "id": "25879a4a.df9b06",
        "type": "udp out",
        "z": "8761bc05.2ab3d",
        "name": "NibeGW",
        "addr": "127.0.0.1",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 1026,
        "y": 441,
        "wires": []
    },
    {
        "id": "394dee69.ab3002",
        "type": "inject",
        "z": "8761bc05.2ab3d",
        "name": "",
        "topic": "nibe/modbus/43005/get",
        "payload": "2",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 712,
        "y": 392,
        "wires": [
            [
                "89ca1e99.b4f4d"
            ]
        ]
    },
    {
        "id": "88171137.36867",
        "type": "mqtt in",
        "z": "8761bc05.2ab3d",
        "name": "",
        "topic": "nibe/modbus/+/set",
        "qos": "2",
        "broker": "ad4cdfd3.59d48",
        "x": 138,
        "y": 412,
        "wires": [
            [
                "89ca1e99.b4f4d"
            ]
        ]
    },
    {
        "id": "74f6018b.e456b",
        "type": "mqtt in",
        "z": "8761bc05.2ab3d",
        "name": "",
        "topic": "nibe/modbus/+/get",
        "qos": "2",
        "broker": "ad4cdfd3.59d48",
        "x": 138,
        "y": 461,
        "wires": [
            [
                "89ca1e99.b4f4d"
            ]
        ]
    },
    {
        "id": "ce90b265.1528b",
        "type": "function",
        "z": "8761bc05.2ab3d",
        "name": "Automatic Alarm reset",
        "func": "var config = flow.get(\"nibe_config\");\nif (msg.topic==config.defaultTopic+\"45001/raw\" && msg.payload==251) {\n        node.send({topic:config.defaultTopic+\"45171/set\",payload:1});\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 617,
        "y": 286,
        "wires": [
            [
                "71c47997.d36a78"
            ]
        ]
    },
    {
        "id": "71c47997.d36a78",
        "type": "delay",
        "z": "8761bc05.2ab3d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "30",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 828,
        "y": 286,
        "wires": [
            [
                "89ca1e99.b4f4d"
            ]
        ]
    },
    {
        "id": "510a41dd.6ca0f",
        "type": "debug",
        "z": "8761bc05.2ab3d",
        "name": "Outgoing messages",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 926,
        "y": 168,
        "wires": []
    },
    {
        "id": "4415acca.72f434",
        "type": "function",
        "z": "8761bc05.2ab3d",
        "name": "Modbus -> MQTT",
        "func": "var buf = Buffer.from(msg.payload);\nvar config = flow.get(\"nibe_config\")||getRegisters();\nvar register = flow.get(\"nibe_registers\")||getRegisters();\nfunction getRegisters() {\n    node.warn(\"Requesting registers/config\");\n    node.send([null,null,msg]);\n}\nif(register===undefined || buf[4]==81 || buf[4]==7 || buf[4]===0 || buf[4]==10) { return; }\nfor (i = 5; i < buf.length-2; i=i+1) {\n    var address = (buf[i+1]*256+buf[i]);\n    checkDataType();\n}\nfunction checkDataType() {\nvar item = register.find(item => item.register == address);\nif(item!==undefined) {\n        if(item.size==\"s32\") {\n            if(buf[4]==80) {\n                //data = (buf[i+7] & 0xFF) << 24 | (buf[i+6] & 0xFF) << 16 | (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n                data = (buf[i+7]*256+buf[i+6])-(buf[i+3]*256+buf[i+2]);\n                if(data>(2,147,483,647)) {\n                    data = (data-4,294,967,295);\n                }\n                i = i+7;\n            } else {\n                //data = (buf[i+5] & 0xFF) << 24 | (buf[i+4] & 0xFF) << 16 | (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n                data = (buf[i+5]*256+buf[i+4])-(buf[i+3]*256+buf[i+2]);\n                i = i+5;\n            }\n        } else if(item.size==\"s16\") {\n            data = (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n            //data = (buf[i+3]*256+buf[i+2]);\n            if(data>32767) {\n                data = data-65535;\n            }\n            \n            i = i+3;\n        } else if(item.size==\"s8\") {\n            data = (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n            //data = (buf[i+3]*256+buf[i+2]);\n            if(data>128) {\n                data = data-256;\n            }\n            i = i+3;\n        } else if(item.size==\"u32\") {\n            if(buf[4]==80) {\n                //data = (buf[i+7] & 0xFF) << 24 | (buf[i+6] & 0xFF) << 16 | (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n                data = (buf[i+7]*256+buf[i+6])+(buf[i+3]*256+buf[i+2]);\n                i = i+7;\n            } else {\n                //data = (buf[i+5] & 0xFF) << 24 | (buf[i+4] & 0xFF) << 16 | (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n                data = (buf[i+5]*256+buf[i+4])+(buf[i+3]*256+buf[i+2]);\n                i = i+5;\n            }\n        } else if(item.size==\"u16\") {\n            data = (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n            //data = (buf[i+3]*256+buf[i+2]);\n            i = i+5;\n        } else if(item.size==\"u8\") {\n            data = (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n            //data = (buf[i+3]*256+buf[i+2]);\n            i = i+3;\n        } else {\n            i = i+3;\n        }\n        data = data/item.factor;\nvar map = item.map;\nvar valueMap;\nif(map!==undefined) {\nfor (y = 0; y < map.length; y=y+1) {\n    var mapKey = Number(Object.keys(map[y]));\n    var mapValue = Object.values(map[y]);\n    if(Number(Object.keys(map[y]))==data) {\n        valueMap = mapValue[0];\n    }\n}\n}\nvar min = Number(item.min);\nvar max = Number(item.max);\n    var ts = Number(Date.now())+3600000;\n    var time = new Date(ts).toISOString().slice(0, -1)+\"+0100\";\nvar corruptData;\nif(min!==undefined && max!==undefined) {\n    if(min!==0 || max!==0) {\n        if((data>max) || (data<min)) {\n            corruptData = true;\n            node.warn('Corrupt payload ('+data+') from register '+address);\n            node.send([null,{payload:time+\" Corrupt data(\"+data+\"), register: \"+address+\", Buffer: \"+buf}]);\n        } else if((data>max*item.factor) || (data<min*item.factor)) {\n            corruptData = true;\n            node.warn('Corrupt payload ('+data+') from register '+address);\n            node.send([null,{payload:time+\" Corrupt data(\"+data+\"), register: \"+address+\", Buffer: \"+buf}]);\n        }\n    }\n}\nvar StringAddress = String(address);\nvar lastValue = flow.get(StringAddress+\"_old\");\nvar saved = flow.get(StringAddress);\n\n    if(corruptData===undefined) {\n    if(valueMap!==undefined) {\n        node.send({payload:valueMap,topic:config.defaultTopic+address});\n        node.send({payload:data,topic:config.defaultTopic+address+\"/raw\"});\n    } else {\n        node.send({payload:data,topic:config.defaultTopic+address});\n    }\n    global.set(StringAddress,data);\n    node.send({payload:\n    {\n        register:item.register,\n        value:data,\n        valueMap:valueMap,\n        unit:item.unit,\n        lastValue:lastValue,\n        factor:item.factor,\n        type:item.size,\n        mode:item.mode,\n        lastUpdate:time,\n        map:map,\n        titel:item.titel,\n        info:item.info,\n        min:min,\n        max:max\n    },\n    topic:config.defaultTopic+address+\"/config\"\n    });\n}\nif(data!=saved) {\n    flow.set(StringAddress+\"_old\", saved);\n    flow.set(StringAddress, data);\n}\n} else {\n    i = i+3;\n}\n\n}\n",
        "outputs": 3,
        "noerr": 0,
        "x": 433,
        "y": 196,
        "wires": [
            [
                "2ff40ef2.97be62",
                "ce90b265.1528b",
                "f749571d.2527b8",
                "510a41dd.6ca0f"
            ],
            [
                "3c00ac13.5e5d74"
            ],
            [
                "e7cba6bb.0406a8"
            ]
        ]
    },
    {
        "id": "fb7fa916.ecc5f8",
        "type": "udp in",
        "z": "8761bc05.2ab3d",
        "name": "NibeGW",
        "iface": "",
        "port": "9999",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "buffer",
        "x": 115,
        "y": 293,
        "wires": [
            [
                "6ef01665.5816b8",
                "4415acca.72f434",
                "89ca1e99.b4f4d"
            ]
        ]
    },
    {
        "id": "6ef01665.5816b8",
        "type": "debug",
        "z": "8761bc05.2ab3d",
        "name": "Raw Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 297,
        "y": 293,
        "wires": []
    },
    {
        "id": "8e756fa9.0dddc",
        "type": "link out",
        "z": "8761bc05.2ab3d",
        "name": "",
        "links": [
            "34cb7d43.544652"
        ],
        "x": 917,
        "y": 440,
        "wires": []
    },
    {
        "id": "e7cba6bb.0406a8",
        "type": "link out",
        "z": "8761bc05.2ab3d",
        "name": "",
        "links": [
            "34cb7d43.544652"
        ],
        "x": 581,
        "y": 202,
        "wires": []
    },
    {
        "id": "eaf32466.5ec1f8",
        "type": "link in",
        "z": "8761bc05.2ab3d",
        "name": "",
        "links": [
            "3e1c34b0.07767c"
        ],
        "x": 603,
        "y": 434,
        "wires": [
            [
                "e967773a.3216f8"
            ]
        ]
    },
    {
        "id": "b7286cc7.d7041",
        "type": "link in",
        "z": "8761bc05.2ab3d",
        "name": "",
        "links": [
            "3e1c34b0.07767c"
        ],
        "x": 273,
        "y": 188,
        "wires": [
            [
                "4415acca.72f434"
            ]
        ]
    },
    {
        "id": "18e67ea4.a842e1",
        "type": "comment",
        "z": "8761bc05.2ab3d",
        "name": "UDP nod till NibeGW",
        "info": "",
        "x": 127,
        "y": 244,
        "wires": []
    },
    {
        "id": "52143bff.4eafc4",
        "type": "comment",
        "z": "8761bc05.2ab3d",
        "name": "MQTT topic sätts av blocket",
        "info": "",
        "x": 630,
        "y": 139,
        "wires": []
    },
    {
        "id": "acc69dcc.bd355",
        "type": "comment",
        "z": "8761bc05.2ab3d",
        "name": "Exempel på att skicka",
        "info": "",
        "x": 407,
        "y": 356,
        "wires": []
    },
    {
        "id": "74100916.1190b8",
        "type": "comment",
        "z": "8761bc05.2ab3d",
        "name": "Exempel på att hämta",
        "info": "",
        "x": 694,
        "y": 356,
        "wires": []
    },
    {
        "id": "20133ff2.6b7b7",
        "type": "comment",
        "z": "8761bc05.2ab3d",
        "name": "Vid Modbus kom.avbrott larm försöker vi återställa det automatiskt var 30 sek.",
        "info": "",
        "x": 787,
        "y": 244,
        "wires": []
    },
    {
        "id": "89ca1e99.b4f4d",
        "type": "function",
        "z": "8761bc05.2ab3d",
        "name": "Begär/skicka data när pumpen tillåter",
        "func": "var config = flow.get(\"nibe_config\");\n\nvar sendQueue = context.get('sendQueue')||[];\nvar getQueue = context.get('getQueue')||[];\nif(msg.payload[3]==105) {\nif(getQueue.length!==0) {\n    var lastMsg = getQueue.pop();\n    node.send(lastMsg);\n    context.set('getQueue',getQueue);\n} else {\nvar updateRegisters = flow.get(\"nibe_update_registers\")||getRegisters();\nvar n = context.get('n')||0;\nnode.send({topic:config.defaultTopic+updateRegisters[n]+\"/get\",payload:true});\nn++;\nif(n>(updateRegisters.length)) {\n    n = 0;\n}\ncontext.set('n',n)\n}\n} else if(msg.payload[3]==107) {\n    if(sendQueue.length!==0) {\n        var lastMsg = sendQueue.pop();\n        node.send(lastMsg);\n        context.set('sendQueue',sendQueue);\n    }\n} else {\n    if(msg.topic!==undefined) {\n    var topic = msg.topic.split(\"/\");\n    if(topic[3]==\"set\") {\n        var sendMsg = {topic:msg.topic,payload:msg.payload};\n        sendQueue.push(sendMsg);\n        context.set('sendQueue',sendQueue);\n    } else if(topic[3]==\"get\") {\n        var getMsg = {topic:msg.topic,payload:msg.payload};\n        getQueue.push(getMsg);\n        context.set('getQueue',getQueue);\n    }\n}\n}\n\nfunction getRegisters() {\n    node.warn(\"Requesting registers\");\n    node.send([null,msg]);\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 451,
        "y": 476,
        "wires": [
            [
                "e967773a.3216f8"
            ],
            []
        ]
    },
    {
        "id": "f749571d.2527b8",
        "type": "link out",
        "z": "8761bc05.2ab3d",
        "name": "Nibe Out",
        "links": [
            "4a698a34.7d2c14"
        ],
        "x": 771,
        "y": 189,
        "wires": []
    },
    {
        "id": "e49de0ac.22e8f",
        "type": "link in",
        "z": "8761bc05.2ab3d",
        "name": "Send message",
        "links": [
            "8e3be05f.54bff"
        ],
        "x": 260,
        "y": 441,
        "wires": [
            [
                "89ca1e99.b4f4d"
            ]
        ]
    },
    {
        "id": "3c00ac13.5e5d74",
        "type": "debug",
        "z": "8761bc05.2ab3d",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 886,
        "y": 203,
        "wires": []
    },
    {
        "id": "ad4cdfd3.59d48",
        "type": "mqtt-broker",
        "z": "",
        "name": "",
        "broker": "192.168.0.127",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    }
]

[
    {
        "id": "5a64925b.6a33fc",
        "type": "function",
        "z": "76cff903.f62f88",
        "name": "Modbus -> MQTT",
        "func": "var buf = Buffer.from(msg.payload);\nvar config = flow.get(\"nibe_config\")||getRegisters();\nvar register = flow.get(\"nibe_registers\")||getRegisters();\nfunction getRegisters() {\n    node.warn(\"Requesting registers/config\");\n    node.send([null,null,msg]);\n}\nif(register===undefined) { return; }\nfor (i = 5; i < buf.length-2; i=i+1) {\n    var address = (buf[i+1]*256+buf[i]);\n    checkDataType();\n}\nfunction checkDataType() {\nvar item = register.find(item => item.register == address);\nif(item!==undefined) {\n        if(item.size==\"s32\") {\n            if(buf[4]==80) {\n                //data = (buf[i+7] & 0xFF) << 24 | (buf[i+6] & 0xFF) << 16 | (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n                data = (buf[i+7]*256+buf[i+6])-(buf[i+3]*256+buf[i+2]);\n                if(data>(2,147,483,647)) {\n                    data = (data-4,294,967,295);\n                }\n                i = i+7;\n            } else {\n                //data = (buf[i+5] & 0xFF) << 24 | (buf[i+4] & 0xFF) << 16 | (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n                data = (buf[i+5]*256+buf[i+4])-(buf[i+3]*256+buf[i+2]);\n                i = i+5;\n            }\n        } else if(item.size==\"s16\") {\n            data = (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n            //data = (buf[i+3]*256+buf[i+2]);\n            if(data>32767) {\n                data = data-65535;\n            }\n            \n            i = i+5;\n        } else if(item.size==\"s8\") {\n            data = (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n            //data = (buf[i+3]*256+buf[i+2]);\n            if(data>128) {\n                data = data-256;\n            }\n            i = i+5;\n        } else if(item.size==\"u32\") {\n            if(buf[4]==80) {\n                //data = (buf[i+7] & 0xFF) << 24 | (buf[i+6] & 0xFF) << 16 | (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n                data = (buf[i+7]*256+buf[i+6])+(buf[i+3]*256+buf[i+2]);\n                i = i+7;\n            } else {\n                //data = (buf[i+5] & 0xFF) << 24 | (buf[i+4] & 0xFF) << 16 | (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n                data = (buf[i+5]*256+buf[i+4])+(buf[i+3]*256+buf[i+2]);\n                i = i+5;\n            }\n        } else if(item.size==\"u16\") {\n            data = (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n            //data = (buf[i+3]*256+buf[i+2]);\n            i = i+5;\n        } else if(item.size==\"u8\") {\n            data = (buf[i+3] & 0xFF) << 8 | (buf[i+2] & 0xFF);\n            //data = (buf[i+3]*256+buf[i+2]);\n            i = i+5;\n        } else {\n            i = i+5;\n        }\n        if(buf[4]==80) {\n            i = i-2;\n        }\n        data = data/item.factor;\nvar map = item.map;\nvar valueMap;\nif(map!==undefined) {\nfor (y = 0; y < map.length; y=y+1) {\n    var mapKey = Number(Object.keys(map[y]));\n    var mapValue = Object.values(map[y]);\n    if(Number(Object.keys(map[y]))==data) {\n        valueMap = mapValue[0];\n    }\n}\n}\nvar min = Number(item.min);\nvar max = Number(item.max);\n    var ts = Number(Date.now())+3600000;\n    var time = new Date(ts).toISOString().slice(0, -1)+\"+0100\";\nvar corruptData;\nif(min!==undefined && max!==undefined) {\n    if(min!==0 || max!==0) {\n        if((data>max) || (data<min)) {\n            corruptData = true;\n            node.warn('Corrupt payload ('+data+') from register '+address);\n            node.send([null,{payload:time+\" Corrupt data(\"+data+\"), register: \"+address+\", Buffer: \"+buf[0]+\",\"+buf[1]+\",\"+buf[2]+\",\"+buf[3]+\",\"+buf[4]+\",\"+buf[5]+\",\"+buf[6]+\",\"+buf[7]+\",\"+buf[8]+\",\"+buf[9]+\",\"+buf[10]+\",\"+buf[11]+\",\"+buf[12]+\",\"}]);\n        } else if((data>max*item.factor) || (data<min*item.factor)) {\n            corruptData = true;\n            node.warn('Corrupt payload ('+data+') from register '+address);\n            node.send([null,{payload:time+\" Corrupt data(\"+data+\"), register: \"+address+\", Buffer: \"+buf[0]+\",\"+buf[1]+\",\"+buf[2]+\",\"+buf[3]+\",\"+buf[4]+\",\"+buf[5]+\",\"+buf[6]+\",\"+buf[7]+\",\"+buf[8]+\",\"+buf[9]+\",\"+buf[10]+\",\"+buf[11]+\",\"+buf[12]+\",\"}]);\n        }\n    }\n}\nvar StringAddress = String(address);\nvar lastValue = flow.get(StringAddress+\"_old\");\nvar saved = flow.get(StringAddress);\n\n    if(corruptData===undefined) {\n    if(valueMap!==undefined) {\n        node.send({payload:valueMap,topic:config.defaultTopic+address});\n        node.send({payload:data,topic:config.defaultTopic+address+\"/raw\"});\n    } else {\n        node.send({payload:data,topic:config.defaultTopic+address});\n    }\n    node.send({payload:\n    {\n        register:item.register,\n        value:data,\n        valueMap:valueMap,\n        unit:item.unit,\n        lastValue:lastValue,\n        factor:item.factor,\n        type:item.size,\n        mode:item.mode,\n        lastUpdate:time,\n        map:map,\n        titel:item.titel,\n        info:item.info,\n        min:min,\n        max:max\n    },\n    topic:config.defaultTopic+address+\"/config\"\n    });\n}\nif(data!=saved) {\n    flow.set(StringAddress+\"_old\", saved);\n    flow.set(StringAddress, data);\n}\n}\n}\n",
        "outputs": 3,
        "noerr": 0,
        "x": 439,
        "y": 195,
        "wires": [
            [
                "ecff355c.c83f38",
                "ef948c82.db206",
                "3663e88b.85f2f8"
            ],
            [
                "d8edf95d.f8c868"
            ],
            [
                "a4db8572.447858"
            ]
        ]
    }
]
